{
    options: {
        // OPTIONAL: Specify algorithm (top-down, left-right, diagonal [\ format],
        // alt-diagonal [/ format], binary-tree [best packing])
        // Visual representations can be found below
        'algorithm': 'top-down',

            // skip function declraration
            cssOpts: {
            'functions': false
        },

        // OPTIONAL: Specify img options
        'imgOpts': {
            // Format of the image (inferred from destImg' extension by default) (jpg, png)
            'format': 'png',

                // Quality of image (gm only)
                'quality': 90
        }
    },

    default: {
        'cssFormat': <% if (cssFormat === 'less') { %>'less'<% } else if (cssFormat === 'scss') { %>'scss'<% } else { %>'css'<% } %>,
        // OPTIONAL: Specify padding between images
        'padding': 50,
        // Sprite files to read in
        'src': ['<%= imgDir %>/spritefiles/default/*.{png,jpg,gif}'],

        // Location to output spritesheet
        'destImg': '<%= imgDir %>/sprites/sprite.default.png',
        <% if (cssFormat === 'less') { %>
        'destCSS': '<%= cssDir %>/spritesmith/sprite-variables.default.less',<% } else if (cssFormat === 'scss') { %>
        'destCSS': '<%= cssDir %>/spritesmith/sprite-variables.default.scss',<% } else { %>
        'destCSS': '<%= cssDir %>/spritesmith/sprite.default.css',
        <% } %><% if (cssFormat === 'less') { %>
        'cssTemplate': '<%= cssDir %>/spritesmith/helper/sprite.less.template.mustache',<% } else if (cssFormat === 'scss') { %>
        'cssTemplate': '<%= cssDir %>/spritesmith/helper/sprite.scss.template.mustache',<% } %>

        // OPTIONAL: Manual override for imgPath specified in CSS
        'imgPath': '/<%= imgDir %>/sprites/sprite.default.png',

        // OPTIONAL: Map variable of each sprite
        'cssVarMap': function(sprite) {
            // `sprite` has `name`, `image` (full path), `x`, `y`
            //   `width`, `height`, `total_width`, `total_height`
            // EXAMPLE: Prefix all sprite names with 'sprite-'
            sprite.name = 'default-' + sprite.name.replace(/\s/, '_');

        }
    },
    retina: {
        'cssFormat': <% if (cssFormat === 'less') { %>'less'<% } else if (cssFormat === 'scss') { %>'scss'<% } else { %>'css'<% } %>,
        // OPTIONAL: Specify padding between images
        'padding': 50,

        // Sprite files to read in
        'src': ['<%= imgDir %>/spritefiles/2x/*.{png,jpg,gif}'],

        // Location to output spritesheet
        'destImg': '<%= imgDir %>/sprites/sprite.retina@2x.png',
        <% if (cssFormat === 'less') { %>
        'destCSS': '<%= cssDir %>/spritesmith/sprite-variables.retina.less',<% } else if (cssFormat === 'scss') { %>
        'destCSS': '<%= cssDir %>/spritesmith/sprite-variables.retina.scss',<% } else { %>
        'destCSS': '<%= cssDir %>/spritesmith/sprite.retina.css',
        <% } %><% if (cssFormat === 'less') { %>
        'cssTemplate': '<%= cssDir %>/spritesmith/helper/retina-sprite.less.template.mustache',<% } else if (cssFormat === 'scss') { %>
        'cssTemplate': '<%= cssDir %>/spritesmith/helper/retina-sprite.scss.template.mustache',<% } %>

        'imgPath': '<%= imgDir %>/sprites/sprite.retina@2x.png',

        // OPTIONAL: Map variable of each sprite
        'cssVarMap': function(sprite) {
            // `sprite` has `name`, `image` (full path), `x`, `y`
            //   `width`, `height`, `total_width`, `total_height`
            // EXAMPLE: Prefix all sprite names with 'sprite-'
            sprite.name = 'retina-' + sprite.name.replace(/\s/, '_');
            sprite.width = sprite.width / 2;
            sprite.height = sprite.height / 2;
            sprite.total_width = sprite.total_width / 2;
            sprite.total_height = sprite.total_height / 2;
            sprite.x = sprite.x / 2;
            sprite.y = sprite.y / 2;
            sprite.image2x = sprite.image.replace(/['"\(\)\s]/g, function encodeCssUri(chr) {
                return '%' + chr.charCodeAt(0).toString(16);
            });
            sprite.image = sprite.image.replace(/@2x/, '');

        }
    }
}